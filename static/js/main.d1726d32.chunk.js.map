{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","time","error","API_KEY","App","state","undefined","e","a","preventDefault","zip","target","elements","value","fetch","api_call","json","data","console","log","cod","setState","main","temp","sys","weather","Moment","utcOffset","timezone","format","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAaeA,EAXA,kBACb,6BACE,wBAAIC,UAAU,0BAAd,6BACA,6BACA,6BACA,wBAAIA,UAAU,6BAAd,+DCEWC,EAPF,SAACC,GAAD,OACX,0BAAMC,SAAUD,EAAME,YACpB,2BAAOC,KAAK,OAAOC,KAAK,MAAMC,YAAY,eAC1C,iDCyCWC,EA5CC,SAACN,GAAD,OACd,yBAAKF,UAAU,iBACZE,EAAMO,MAAQP,EAAMQ,SACnB,uBAAGV,UAAU,gBACV,IADH,YAGE,0BAAMA,UAAU,kBACb,IACAE,EAAMO,KAFT,KAEiBP,EAAMQ,UAI1BR,EAAMS,aACL,uBAAGX,UAAU,gBACV,IADH,eAGE,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMS,YAAzC,MAGHT,EAAMU,UACL,uBAAGZ,UAAU,gBACV,IADH,YAGE,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMU,SAAzC,MAGHV,EAAMW,aACL,uBAAGb,UAAU,gBACV,IADH,cAGE,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMW,YAAzC,MAGHX,EAAMW,aACL,uBAAGb,UAAU,gBACV,IADH,gBAGE,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMY,KAAzC,MAGHZ,EAAMa,OAAS,uBAAGf,UAAU,kBAAkBE,EAAMa,S,gBCjCnDC,G,YAAU,oCA4FDC,E,4MAzFbC,MAAQ,CACNP,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,iBAAaM,EACbL,UAAMK,EACNJ,WAAOI,G,EAETf,W,uCAAa,WAAOgB,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIC,EAAMH,EAAEI,OAAOC,SAASF,IAAIG,MAE5BhB,EAAU,KAJL,SAQYiB,MAAM,qDAAD,OAC2BJ,EAD3B,YACkCb,EADlC,kBACmDM,EADnD,oBARjB,cAQLY,EARK,gBAWQA,EAASC,OAXjB,OAWLC,EAXK,OAYXC,QAAQC,IAAIF,EAAKG,KACbV,GAAOb,EACQ,MAAboB,EAAKG,IACP,EAAKC,SAAS,CACZvB,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,iBAAaM,EACbL,UAAMK,EACNJ,MAAO,sCAGT,EAAKmB,SAAS,CACZvB,YAAamB,EAAKK,KAAKC,KAAO,KAC9B3B,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKO,IAAI3B,QAClBE,SAAUkB,EAAKK,KAAKvB,SAAW,IAC/BC,YAAaiB,EAAKQ,QAAQ,GAAGzB,YAC7BC,KAAMyB,MACHC,UAAUV,EAAKW,SAAW,IAC1BC,OAAO,qBACV3B,MAAO,KAIX,EAAKmB,SAAS,CACZvB,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,iBAAaM,EACbL,UAAMK,EACNJ,MAAO,6BA7CA,4C,6GAkDX,OACE,6BACE,yBAAKf,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMI,WAAYuC,KAAKvC,aACvB,kBAAC,EAAD,CACEO,YAAagC,KAAKzB,MAAMP,YACxBC,SAAU+B,KAAKzB,MAAMN,SACrBH,KAAMkC,KAAKzB,MAAMT,KACjBC,QAASiC,KAAKzB,MAAMR,QACpBG,YAAa8B,KAAKzB,MAAML,YACxBC,KAAM6B,KAAKzB,MAAMJ,KACjBC,MAAO4B,KAAKzB,MAAMH,kB,GA9EpB6B,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.d1726d32.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n  <div>\r\n    <h1 className=\"title-container__title\">What's the weather today?</h1>\r\n    <br></br>\r\n    <br></br>\r\n    <h3 className=\"title-container__subtitle\">\r\n      Know the weather in your area, forecast and much more....\r\n    </h3>\r\n  </div>\r\n);\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nconst Form = (props) => (\r\n  <form onSubmit={props.getWeather}>\r\n    <input type=\"text\" name=\"zip\" placeholder=\"Zipcode...\" />\r\n    <button>Get Weather</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = (props) => (\r\n  <div className=\"weather__info\">\r\n    {props.city && props.country && (\r\n      <p className=\"weather__key\">\r\n        {\" \"}\r\n        Location:\r\n        <span className=\"weather__value\">\r\n          {\" \"}\r\n          {props.city}, {props.country}\r\n        </span>\r\n      </p>\r\n    )}\r\n    {props.temperature && (\r\n      <p className=\"weather__key\">\r\n        {\" \"}\r\n        Temperature:\r\n        <span className=\"weather__value\"> {props.temperature} </span>\r\n      </p>\r\n    )}\r\n    {props.humidity && (\r\n      <p className=\"weather__key\">\r\n        {\" \"}\r\n        Humidity:\r\n        <span className=\"weather__value\"> {props.humidity} </span>\r\n      </p>\r\n    )}\r\n    {props.description && (\r\n      <p className=\"weather__key\">\r\n        {\" \"}\r\n        Conditions:\r\n        <span className=\"weather__value\"> {props.description} </span>\r\n      </p>\r\n    )}\r\n    {props.description && (\r\n      <p className=\"weather__key\">\r\n        {\" \"}\r\n        Current Time:\r\n        <span className=\"weather__value\"> {props.time} </span>\r\n      </p>\r\n    )}\r\n    {props.error && <p className=\"weather__error\">{props.error}</p>}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport Moment from \"moment\";\nimport \"moment-timezone\";\n//import tz from \"zipcode-to-timezone\";\nimport \"./App.css\";\n\nconst API_KEY = \"f5c71672d1aae94b50968e5701eb9f9f\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    time: undefined,\n    error: undefined,\n  };\n  getWeather = async (e) => {\n    e.preventDefault();\n    const zip = e.target.elements.zip.value;\n    //const country = e.target.elements.country.value;\n    const country = \"US\";\n    //const api_call = await fetch(\n    //  `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    //);\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${zip},${country}&appid=${API_KEY}&units=Imperial`\n    );\n    const data = await api_call.json();\n    console.log(data.cod);\n    if (zip && country) {\n      if (data.cod !== 200) {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          time: undefined,\n          error: \"Please enter the correct zipcode!\",\n        });\n      } else {\n        this.setState({\n          temperature: data.main.temp + \" F\",\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity + \"%\",\n          description: data.weather[0].description,\n          time: Moment()\n            .utcOffset(data.timezone / 60)\n            .format(\"YYYY-MM-DD h:mm A\"),\n          error: \"\",\n        });\n      }\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        time: undefined,\n        error: \"Please enter the values.\",\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    time={this.state.time}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}